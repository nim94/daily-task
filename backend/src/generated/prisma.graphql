# source: http://localhost:4466
# timestamp: Tue May 07 2019 10:06:12 GMT+0200 (GMT+02:00)

type AggregateStep {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateTaskClass {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTaskClass(data: TaskClassCreateInput!): TaskClass!
  createTask(data: TaskCreateInput!): Task!
  createStep(data: StepCreateInput!): Step!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTaskClass(data: TaskClassUpdateInput!, where: TaskClassWhereUniqueInput!): TaskClass
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTaskClass(where: TaskClassWhereUniqueInput!): TaskClass
  deleteTask(where: TaskWhereUniqueInput!): Task
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTaskClass(where: TaskClassWhereUniqueInput!, create: TaskClassCreateInput!, update: TaskClassUpdateInput!): TaskClass!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyTaskClasses(data: TaskClassUpdateManyMutationInput!, where: TaskClassWhereInput): BatchPayload!
  updateManyTasks(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
  updateManySteps(data: StepUpdateManyMutationInput!, where: StepWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTaskClasses(where: TaskClassWhereInput): BatchPayload!
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  deleteManySteps(where: StepWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  taskClasses(where: TaskClassWhereInput, orderBy: TaskClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TaskClass]!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  steps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step]!
  user(where: UserWhereUniqueInput!): User
  taskClass(where: TaskClassWhereUniqueInput!): TaskClass
  task(where: TaskWhereUniqueInput!): Task
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  taskClassesConnection(where: TaskClassWhereInput, orderBy: TaskClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskClassConnection!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  stepsConnection(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StepConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Step {
  name: String!
  time: String!
  color: String
  notify: Boolean
}

"""A connection to a list of items."""
type StepConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StepEdge]!
  aggregate: AggregateStep!
}

input StepCreateInput {
  name: String!
  time: String!
  color: String
  notify: Boolean
}

input StepCreateManyInput {
  create: [StepCreateInput!]
}

"""An edge in a connection."""
type StepEdge {
  """The item at the end of the edge."""
  node: Step!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StepOrderByInput {
  name_ASC
  name_DESC
  time_ASC
  time_DESC
  color_ASC
  color_DESC
  notify_ASC
  notify_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StepPreviousValues {
  name: String!
  time: String!
  color: String
  notify: Boolean
}

input StepScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StepScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StepScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StepScalarWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  notify: Boolean

  """All values that are not equal to given value."""
  notify_not: Boolean
}

type StepSubscriptionPayload {
  mutation: MutationType!
  node: Step
  updatedFields: [String!]
  previousValues: StepPreviousValues
}

input StepSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StepSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StepSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StepSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StepWhereInput
}

input StepUpdateManyDataInput {
  name: String
  time: String
  color: String
  notify: Boolean
}

input StepUpdateManyInput {
  create: [StepCreateInput!]
  updateMany: [StepUpdateManyWithWhereNestedInput!]
  deleteMany: [StepScalarWhereInput!]
}

input StepUpdateManyMutationInput {
  name: String
  time: String
  color: String
  notify: Boolean
}

input StepUpdateManyWithWhereNestedInput {
  where: StepScalarWhereInput!
  data: StepUpdateManyDataInput!
}

input StepWhereInput {
  """Logical AND on all given filters."""
  AND: [StepWhereInput!]

  """Logical OR on all given filters."""
  OR: [StepWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StepWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  notify: Boolean

  """All values that are not equal to given value."""
  notify_not: Boolean
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  taskClass(where: TaskClassSubscriptionWhereInput): TaskClassSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  step(where: StepSubscriptionWhereInput): StepSubscriptionPayload
}

type Task implements Node {
  id: ID!
  userId: String!
  name: String!
  begin: Int
  end: Int
  steps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step!]
  type: TaskType
  priority: Int
}

type TaskClass implements Node {
  id: ID!
  userId: String!
  name: String!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  begin: Int!
  end: Int!
}

"""A connection to a list of items."""
type TaskClassConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskClassEdge]!
  aggregate: AggregateTaskClass!
}

input TaskClassCreateInput {
  userId: String!
  name: String!
  begin: Int!
  end: Int!
  tasks: TaskCreateManyInput
}

"""An edge in a connection."""
type TaskClassEdge {
  """The item at the end of the edge."""
  node: TaskClass!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TaskClassOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  name_ASC
  name_DESC
  begin_ASC
  begin_DESC
  end_ASC
  end_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TaskClassPreviousValues {
  id: ID!
  userId: String!
  name: String!
  begin: Int!
  end: Int!
}

type TaskClassSubscriptionPayload {
  mutation: MutationType!
  node: TaskClass
  updatedFields: [String!]
  previousValues: TaskClassPreviousValues
}

input TaskClassSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskClassSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskClassSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskClassSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaskClassWhereInput
}

input TaskClassUpdateInput {
  userId: String
  name: String
  begin: Int
  end: Int
  tasks: TaskUpdateManyInput
}

input TaskClassUpdateManyMutationInput {
  userId: String
  name: String
  begin: Int
  end: Int
}

input TaskClassWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskClassWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskClassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskClassWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  userId: String

  """All values that are not equal to given value."""
  userId_not: String

  """All values that are contained in given list."""
  userId_in: [String!]

  """All values that are not contained in given list."""
  userId_not_in: [String!]

  """All values less than the given value."""
  userId_lt: String

  """All values less than or equal the given value."""
  userId_lte: String

  """All values greater than the given value."""
  userId_gt: String

  """All values greater than or equal the given value."""
  userId_gte: String

  """All values containing the given string."""
  userId_contains: String

  """All values not containing the given string."""
  userId_not_contains: String

  """All values starting with the given string."""
  userId_starts_with: String

  """All values not starting with the given string."""
  userId_not_starts_with: String

  """All values ending with the given string."""
  userId_ends_with: String

  """All values not ending with the given string."""
  userId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  begin: Int

  """All values that are not equal to given value."""
  begin_not: Int

  """All values that are contained in given list."""
  begin_in: [Int!]

  """All values that are not contained in given list."""
  begin_not_in: [Int!]

  """All values less than the given value."""
  begin_lt: Int

  """All values less than or equal the given value."""
  begin_lte: Int

  """All values greater than the given value."""
  begin_gt: Int

  """All values greater than or equal the given value."""
  begin_gte: Int
  end: Int

  """All values that are not equal to given value."""
  end_not: Int

  """All values that are contained in given list."""
  end_in: [Int!]

  """All values that are not contained in given list."""
  end_not_in: [Int!]

  """All values less than the given value."""
  end_lt: Int

  """All values less than or equal the given value."""
  end_lte: Int

  """All values greater than the given value."""
  end_gt: Int

  """All values greater than or equal the given value."""
  end_gte: Int
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
}

input TaskClassWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type TaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  userId: String!
  name: String!
  begin: Int
  end: Int
  type: TaskType
  priority: Int
  steps: StepCreateManyInput
}

input TaskCreateManyInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  name_ASC
  name_DESC
  begin_ASC
  begin_DESC
  end_ASC
  end_DESC
  type_ASC
  type_DESC
  priority_ASC
  priority_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TaskPreviousValues {
  id: ID!
  userId: String!
  name: String!
  begin: Int
  end: Int
  type: TaskType
  priority: Int
}

input TaskScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  userId: String

  """All values that are not equal to given value."""
  userId_not: String

  """All values that are contained in given list."""
  userId_in: [String!]

  """All values that are not contained in given list."""
  userId_not_in: [String!]

  """All values less than the given value."""
  userId_lt: String

  """All values less than or equal the given value."""
  userId_lte: String

  """All values greater than the given value."""
  userId_gt: String

  """All values greater than or equal the given value."""
  userId_gte: String

  """All values containing the given string."""
  userId_contains: String

  """All values not containing the given string."""
  userId_not_contains: String

  """All values starting with the given string."""
  userId_starts_with: String

  """All values not starting with the given string."""
  userId_not_starts_with: String

  """All values ending with the given string."""
  userId_ends_with: String

  """All values not ending with the given string."""
  userId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  begin: Int

  """All values that are not equal to given value."""
  begin_not: Int

  """All values that are contained in given list."""
  begin_in: [Int!]

  """All values that are not contained in given list."""
  begin_not_in: [Int!]

  """All values less than the given value."""
  begin_lt: Int

  """All values less than or equal the given value."""
  begin_lte: Int

  """All values greater than the given value."""
  begin_gt: Int

  """All values greater than or equal the given value."""
  begin_gte: Int
  end: Int

  """All values that are not equal to given value."""
  end_not: Int

  """All values that are contained in given list."""
  end_in: [Int!]

  """All values that are not contained in given list."""
  end_not_in: [Int!]

  """All values less than the given value."""
  end_lt: Int

  """All values less than or equal the given value."""
  end_lte: Int

  """All values greater than the given value."""
  end_gt: Int

  """All values greater than or equal the given value."""
  end_gte: Int
  type: TaskType

  """All values that are not equal to given value."""
  type_not: TaskType

  """All values that are contained in given list."""
  type_in: [TaskType!]

  """All values that are not contained in given list."""
  type_not_in: [TaskType!]
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
}

enum TaskType {
  SPECIAL
  BASE
  DATE_TO_DATE
  DAILY
  FERIAL
  WEEKLY
}

input TaskUpdateDataInput {
  userId: String
  name: String
  begin: Int
  end: Int
  type: TaskType
  priority: Int
  steps: StepUpdateManyInput
}

input TaskUpdateInput {
  userId: String
  name: String
  begin: Int
  end: Int
  type: TaskType
  priority: Int
  steps: StepUpdateManyInput
}

input TaskUpdateManyDataInput {
  userId: String
  name: String
  begin: Int
  end: Int
  type: TaskType
  priority: Int
}

input TaskUpdateManyInput {
  create: [TaskCreateInput!]
  connect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueNestedInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
  deleteMany: [TaskScalarWhereInput!]
  upsert: [TaskUpsertWithWhereUniqueNestedInput!]
}

input TaskUpdateManyMutationInput {
  userId: String
  name: String
  begin: Int
  end: Int
  type: TaskType
  priority: Int
}

input TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput!
  data: TaskUpdateManyDataInput!
}

input TaskUpdateWithWhereUniqueNestedInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateDataInput!
}

input TaskUpsertWithWhereUniqueNestedInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateDataInput!
  create: TaskCreateInput!
}

input TaskWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  userId: String

  """All values that are not equal to given value."""
  userId_not: String

  """All values that are contained in given list."""
  userId_in: [String!]

  """All values that are not contained in given list."""
  userId_not_in: [String!]

  """All values less than the given value."""
  userId_lt: String

  """All values less than or equal the given value."""
  userId_lte: String

  """All values greater than the given value."""
  userId_gt: String

  """All values greater than or equal the given value."""
  userId_gte: String

  """All values containing the given string."""
  userId_contains: String

  """All values not containing the given string."""
  userId_not_contains: String

  """All values starting with the given string."""
  userId_starts_with: String

  """All values not starting with the given string."""
  userId_not_starts_with: String

  """All values ending with the given string."""
  userId_ends_with: String

  """All values not ending with the given string."""
  userId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  begin: Int

  """All values that are not equal to given value."""
  begin_not: Int

  """All values that are contained in given list."""
  begin_in: [Int!]

  """All values that are not contained in given list."""
  begin_not_in: [Int!]

  """All values less than the given value."""
  begin_lt: Int

  """All values less than or equal the given value."""
  begin_lte: Int

  """All values greater than the given value."""
  begin_gt: Int

  """All values greater than or equal the given value."""
  begin_gte: Int
  end: Int

  """All values that are not equal to given value."""
  end_not: Int

  """All values that are contained in given list."""
  end_in: [Int!]

  """All values that are not contained in given list."""
  end_not_in: [Int!]

  """All values less than the given value."""
  end_lt: Int

  """All values less than or equal the given value."""
  end_lte: Int

  """All values greater than the given value."""
  end_gt: Int

  """All values greater than or equal the given value."""
  end_gte: Int
  type: TaskType

  """All values that are not equal to given value."""
  type_not: TaskType

  """All values that are contained in given list."""
  type_in: [TaskType!]

  """All values that are not contained in given list."""
  type_not_in: [TaskType!]
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  steps_every: StepWhereInput
  steps_some: StepWhereInput
  steps_none: StepWhereInput
}

input TaskWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  mail: String!
  psw: String!
  token: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  mail: String!
  psw: String!
  token: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  mail_ASC
  mail_DESC
  psw_ASC
  psw_DESC
  token_ASC
  token_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  mail: String!
  psw: String!
  token: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  mail: String
  psw: String
  token: String
}

input UserUpdateManyMutationInput {
  name: String
  mail: String
  psw: String
  token: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  mail: String

  """All values that are not equal to given value."""
  mail_not: String

  """All values that are contained in given list."""
  mail_in: [String!]

  """All values that are not contained in given list."""
  mail_not_in: [String!]

  """All values less than the given value."""
  mail_lt: String

  """All values less than or equal the given value."""
  mail_lte: String

  """All values greater than the given value."""
  mail_gt: String

  """All values greater than or equal the given value."""
  mail_gte: String

  """All values containing the given string."""
  mail_contains: String

  """All values not containing the given string."""
  mail_not_contains: String

  """All values starting with the given string."""
  mail_starts_with: String

  """All values not starting with the given string."""
  mail_not_starts_with: String

  """All values ending with the given string."""
  mail_ends_with: String

  """All values not ending with the given string."""
  mail_not_ends_with: String
  psw: String

  """All values that are not equal to given value."""
  psw_not: String

  """All values that are contained in given list."""
  psw_in: [String!]

  """All values that are not contained in given list."""
  psw_not_in: [String!]

  """All values less than the given value."""
  psw_lt: String

  """All values less than or equal the given value."""
  psw_lte: String

  """All values greater than the given value."""
  psw_gt: String

  """All values greater than or equal the given value."""
  psw_gte: String

  """All values containing the given string."""
  psw_contains: String

  """All values not containing the given string."""
  psw_not_contains: String

  """All values starting with the given string."""
  psw_starts_with: String

  """All values not starting with the given string."""
  psw_not_starts_with: String

  """All values ending with the given string."""
  psw_ends_with: String

  """All values not ending with the given string."""
  psw_not_ends_with: String
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
